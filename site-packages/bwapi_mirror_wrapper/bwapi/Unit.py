from bwapi import Unit as Java_Unit

if False:
    import bwapi_mirror_wrapper.bwapi.Order as Order
    import bwapi_mirror_wrapper.bwapi.UpgradeType as UpgradeType
    import bwapi_mirror_wrapper.bwapi.TechType as TechType
    import bwapi_mirror_wrapper.bwapi.UnitCommand as UnitCommand
    import bwapi_mirror_wrapper.bwapi.Region as Region
    import bwapi_mirror_wrapper.bwapi.TilePosition as TilePosition
    import bwapi_mirror_wrapper.bwapi.Position as Position
    import bwapi_mirror_wrapper.bwapi.UnitType as UnitType
    import bwapi_mirror_wrapper.bwapi.Player as Player
    class Unit(object):

        def __init__(self, field):
            self._field = field

        def __getattribute__(self, attr):
            field_name = object.__getattribute__(self, "_field")
            unit_type = getattr(Java_Unit, field_name)
            return getattr(unit_type, attr)

        def getID(self, ):
            pass
        
        def exists(self, ):
            pass
        
        def getReplayID(self, ):
            pass
        
        def getPlayer(self, ):
            return Player.Player()
        
        def getType(self, ):
            return UnitType.UnitType()
        
        def getPosition(self, ):
            return Position.Position()
        
        def getTilePosition(self, ):
            return TilePosition.TilePosition()
        
        def getAngle(self, ):
            pass
        
        def getVelocityX(self, ):
            pass
        
        def getVelocityY(self, ):
            pass
        
        def getRegion(self, ):
            return Region.Region()
        
        def getLeft(self, ):
            pass
        
        def getTop(self, ):
            pass
        
        def getRight(self, ):
            pass
        
        def getBottom(self, ):
            pass
        
        def getHitPoints(self, ):
            pass
        
        def getShields(self, ):
            pass
        
        def getEnergy(self, ):
            pass
        
        def getResources(self, ):
            pass
        
        def getResourceGroup(self, ):
            pass
        
        def getDistance(self, target, ):
            pass
        
        def getDistance(self, target, ):
            pass
        
        def getDistance(self, target, ):
            pass
        
        def hasPath(self, target, ):
            pass
        
        def hasPath(self, target, ):
            pass
        
        def hasPath(self, target, ):
            pass
        
        def getLastCommandFrame(self, ):
            pass
        
        def getLastCommand(self, ):
            return UnitCommand.UnitCommand()
        
        def getLastAttackingPlayer(self, ):
            return Player.Player()
        
        def getInitialType(self, ):
            return UnitType.UnitType()
        
        def getInitialPosition(self, ):
            return Position.Position()
        
        def getInitialTilePosition(self, ):
            return TilePosition.TilePosition()
        
        def getInitialHitPoints(self, ):
            pass
        
        def getInitialResources(self, ):
            pass
        
        def getKillCount(self, ):
            pass
        
        def getAcidSporeCount(self, ):
            pass
        
        def getInterceptorCount(self, ):
            pass
        
        def getScarabCount(self, ):
            pass
        
        def getSpiderMineCount(self, ):
            pass
        
        def getGroundWeaponCooldown(self, ):
            pass
        
        def getAirWeaponCooldown(self, ):
            pass
        
        def getSpellCooldown(self, ):
            pass
        
        def getDefenseMatrixPoints(self, ):
            pass
        
        def getDefenseMatrixTimer(self, ):
            pass
        
        def getEnsnareTimer(self, ):
            pass
        
        def getIrradiateTimer(self, ):
            pass
        
        def getLockdownTimer(self, ):
            pass
        
        def getMaelstromTimer(self, ):
            pass
        
        def getOrderTimer(self, ):
            pass
        
        def getPlagueTimer(self, ):
            pass
        
        def getRemoveTimer(self, ):
            pass
        
        def getStasisTimer(self, ):
            pass
        
        def getStimTimer(self, ):
            pass
        
        def getBuildType(self, ):
            return UnitType.UnitType()
        
        def getTrainingQueue(self, ):
            pass
        
        def getTech(self, ):
            return TechType.TechType()
        
        def getUpgrade(self, ):
            return UpgradeType.UpgradeType()
        
        def getRemainingBuildTime(self, ):
            pass
        
        def getRemainingTrainTime(self, ):
            pass
        
        def getRemainingResearchTime(self, ):
            pass
        
        def getRemainingUpgradeTime(self, ):
            pass
        
        def getBuildUnit(self, ):
            return Unit.Unit()
        
        def getTarget(self, ):
            return Unit.Unit()
        
        def getTargetPosition(self, ):
            return Position.Position()
        
        def getOrder(self, ):
            return Order.Order()
        
        def getSecondaryOrder(self, ):
            return Order.Order()
        
        def getOrderTarget(self, ):
            return Unit.Unit()
        
        def getOrderTargetPosition(self, ):
            return Position.Position()
        
        def getRallyPosition(self, ):
            return Position.Position()
        
        def getRallyUnit(self, ):
            return Unit.Unit()
        
        def getAddon(self, ):
            return Unit.Unit()
        
        def getNydusExit(self, ):
            return Unit.Unit()
        
        def getPowerUp(self, ):
            return Unit.Unit()
        
        def getTransport(self, ):
            return Unit.Unit()
        
        def getLoadedUnits(self, ):
            pass
        
        def getSpaceRemaining(self, ):
            pass
        
        def getCarrier(self, ):
            return Unit.Unit()
        
        def getInterceptors(self, ):
            pass
        
        def getHatchery(self, ):
            return Unit.Unit()
        
        def getLarva(self, ):
            pass
        
        def getUnitsInRadius(self, radius, ):
            pass
        
        def getUnitsInWeaponRange(self, weapon, ):
            pass
        
        def hasNuke(self, ):
            pass
        
        def isAccelerating(self, ):
            pass
        
        def isAttacking(self, ):
            pass
        
        def isAttackFrame(self, ):
            pass
        
        def isBeingConstructed(self, ):
            pass
        
        def isBeingGathered(self, ):
            pass
        
        def isBeingHealed(self, ):
            pass
        
        def isBlind(self, ):
            pass
        
        def isBraking(self, ):
            pass
        
        def isBurrowed(self, ):
            pass
        
        def isCarryingGas(self, ):
            pass
        
        def isCarryingMinerals(self, ):
            pass
        
        def isCloaked(self, ):
            pass
        
        def isCompleted(self, ):
            pass
        
        def isConstructing(self, ):
            pass
        
        def isDefenseMatrixed(self, ):
            pass
        
        def isDetected(self, ):
            pass
        
        def isEnsnared(self, ):
            pass
        
        def isFlying(self, ):
            pass
        
        def isFollowing(self, ):
            pass
        
        def isGatheringGas(self, ):
            pass
        
        def isGatheringMinerals(self, ):
            pass
        
        def isHallucination(self, ):
            pass
        
        def isHoldingPosition(self, ):
            pass
        
        def isIdle(self, ):
            pass
        
        def isInterruptible(self, ):
            pass
        
        def isInvincible(self, ):
            pass
        
        def isInWeaponRange(self, target, ):
            pass
        
        def isIrradiated(self, ):
            pass
        
        def isLifted(self, ):
            pass
        
        def isLoaded(self, ):
            pass
        
        def isLockedDown(self, ):
            pass
        
        def isMaelstrommed(self, ):
            pass
        
        def isMorphing(self, ):
            pass
        
        def isMoving(self, ):
            pass
        
        def isParasited(self, ):
            pass
        
        def isPatrolling(self, ):
            pass
        
        def isPlagued(self, ):
            pass
        
        def isRepairing(self, ):
            pass
        
        def isResearching(self, ):
            pass
        
        def isSelected(self, ):
            pass
        
        def isSieged(self, ):
            pass
        
        def isStartingAttack(self, ):
            pass
        
        def isStasised(self, ):
            pass
        
        def isStimmed(self, ):
            pass
        
        def isStuck(self, ):
            pass
        
        def isTraining(self, ):
            pass
        
        def isUnderAttack(self, ):
            pass
        
        def isUnderDarkSwarm(self, ):
            pass
        
        def isUnderDisruptionWeb(self, ):
            pass
        
        def isUnderStorm(self, ):
            pass
        
        def isPowered(self, ):
            pass
        
        def isUpgrading(self, ):
            pass
        
        def isVisible(self, ):
            pass
        
        def isVisible(self, player, ):
            pass
        
        def isTargetable(self, ):
            pass
        
        def issueCommand(self, command, ):
            pass
        
        def attack(self, target, ):
            pass
        
        def attack(self, target, ):
            pass
        
        def attack(self, target, ):
            pass
        
        def attack(self, target, shiftQueueCommand, ):
            pass
        
        def attack(self, target, shiftQueueCommand, ):
            pass
        
        def attack(self, target, shiftQueueCommand, ):
            pass
        
        def build(self, type, ):
            pass
        
        def build(self, type, target, ):
            pass
        
        def buildAddon(self, type, ):
            pass
        
        def train(self, ):
            pass
        
        def train(self, type, ):
            pass
        
        def morph(self, type, ):
            pass
        
        def research(self, tech, ):
            pass
        
        def upgrade(self, upgrade, ):
            pass
        
        def setRallyPoint(self, target, ):
            pass
        
        def setRallyPoint(self, target, ):
            pass
        
        def setRallyPoint(self, target, ):
            pass
        
        def move(self, target, ):
            pass
        
        def move(self, target, shiftQueueCommand, ):
            pass
        
        def patrol(self, target, ):
            pass
        
        def patrol(self, target, shiftQueueCommand, ):
            pass
        
        def holdPosition(self, ):
            pass
        
        def holdPosition(self, shiftQueueCommand, ):
            pass
        
        def stop(self, ):
            pass
        
        def stop(self, shiftQueueCommand, ):
            pass
        
        def follow(self, target, ):
            pass
        
        def follow(self, target, shiftQueueCommand, ):
            pass
        
        def gather(self, target, ):
            pass
        
        def gather(self, target, shiftQueueCommand, ):
            pass
        
        def returnCargo(self, ):
            pass
        
        def returnCargo(self, shiftQueueCommand, ):
            pass
        
        def repair(self, target, ):
            pass
        
        def repair(self, target, shiftQueueCommand, ):
            pass
        
        def burrow(self, ):
            pass
        
        def unburrow(self, ):
            pass
        
        def cloak(self, ):
            pass
        
        def decloak(self, ):
            pass
        
        def siege(self, ):
            pass
        
        def unsiege(self, ):
            pass
        
        def lift(self, ):
            pass
        
        def land(self, target, ):
            pass
        
        def load(self, target, ):
            pass
        
        def load(self, target, shiftQueueCommand, ):
            pass
        
        def unload(self, target, ):
            pass
        
        def unloadAll(self, ):
            pass
        
        def unloadAll(self, shiftQueueCommand, ):
            pass
        
        def unloadAll(self, target, ):
            pass
        
        def unloadAll(self, target, shiftQueueCommand, ):
            pass
        
        def rightClick(self, target, ):
            pass
        
        def rightClick(self, target, ):
            pass
        
        def rightClick(self, target, ):
            pass
        
        def rightClick(self, target, shiftQueueCommand, ):
            pass
        
        def rightClick(self, target, shiftQueueCommand, ):
            pass
        
        def rightClick(self, target, shiftQueueCommand, ):
            pass
        
        def haltConstruction(self, ):
            pass
        
        def cancelConstruction(self, ):
            pass
        
        def cancelAddon(self, ):
            pass
        
        def cancelTrain(self, ):
            pass
        
        def cancelTrain(self, slot, ):
            pass
        
        def cancelMorph(self, ):
            pass
        
        def cancelResearch(self, ):
            pass
        
        def cancelUpgrade(self, ):
            pass
        
        def useTech(self, tech, ):
            pass
        
        def useTech(self, tech, target, ):
            pass
        
        def useTech(self, tech, target, ):
            pass
        
        def useTech(self, tech, target, ):
            pass
        
        def placeCOP(self, target, ):
            pass
        
        def canIssueCommand(self, command, checkCanUseTechPositionOnPositions, checkCanUseTechUnitOnUnits, checkCanBuildUnitType, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canIssueCommand(self, command, checkCanUseTechPositionOnPositions, checkCanUseTechUnitOnUnits, checkCanBuildUnitType, checkCanTargetUnit, ):
            pass
        
        def canIssueCommand(self, command, checkCanUseTechPositionOnPositions, checkCanUseTechUnitOnUnits, checkCanBuildUnitType, ):
            pass
        
        def canIssueCommand(self, command, checkCanUseTechPositionOnPositions, checkCanUseTechUnitOnUnits, ):
            pass
        
        def canIssueCommand(self, command, checkCanUseTechPositionOnPositions, ):
            pass
        
        def canIssueCommand(self, command, ):
            pass
        
        def canIssueCommand(self, command, checkCanUseTechPositionOnPositions, checkCanUseTechUnitOnUnits, checkCanBuildUnitType, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canIssueCommandGrouped(self, command, checkCanUseTechPositionOnPositions, checkCanUseTechUnitOnUnits, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibilityGrouped, ):
            pass
        
        def canIssueCommandGrouped(self, command, checkCanUseTechPositionOnPositions, checkCanUseTechUnitOnUnits, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canIssueCommandGrouped(self, command, checkCanUseTechPositionOnPositions, checkCanUseTechUnitOnUnits, checkCanTargetUnit, ):
            pass
        
        def canIssueCommandGrouped(self, command, checkCanUseTechPositionOnPositions, checkCanUseTechUnitOnUnits, ):
            pass
        
        def canIssueCommandGrouped(self, command, checkCanUseTechPositionOnPositions, ):
            pass
        
        def canIssueCommandGrouped(self, command, ):
            pass
        
        def canIssueCommandGrouped(self, command, checkCanUseTechPositionOnPositions, checkCanUseTechUnitOnUnits, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibilityGrouped, checkCommandibility, ):
            pass
        
        def canCommand(self, ):
            pass
        
        def canCommandGrouped(self, ):
            pass
        
        def canCommandGrouped(self, checkCommandibility, ):
            pass
        
        def canIssueCommandType(self, ct, ):
            pass
        
        def canIssueCommandType(self, ct, checkCommandibility, ):
            pass
        
        def canIssueCommandTypeGrouped(self, ct, checkCommandibilityGrouped, ):
            pass
        
        def canIssueCommandTypeGrouped(self, ct, ):
            pass
        
        def canIssueCommandTypeGrouped(self, ct, checkCommandibilityGrouped, checkCommandibility, ):
            pass
        
        def canTargetUnit(self, targetUnit, ):
            pass
        
        def canTargetUnit(self, targetUnit, checkCommandibility, ):
            pass
        
        def canAttack(self, ):
            pass
        
        def canAttack(self, checkCommandibility, ):
            pass
        
        def canAttack(self, target, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canAttack(self, target, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canAttack(self, target, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canAttack(self, target, checkCanTargetUnit, ):
            pass
        
        def canAttack(self, target, checkCanTargetUnit, ):
            pass
        
        def canAttack(self, target, checkCanTargetUnit, ):
            pass
        
        def canAttack(self, target, ):
            pass
        
        def canAttack(self, target, ):
            pass
        
        def canAttack(self, target, ):
            pass
        
        def canAttack(self, target, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canAttack(self, target, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canAttack(self, target, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canAttackGrouped(self, checkCommandibilityGrouped, ):
            pass
        
        def canAttackGrouped(self, ):
            pass
        
        def canAttackGrouped(self, checkCommandibilityGrouped, checkCommandibility, ):
            pass
        
        def canAttackGrouped(self, target, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibilityGrouped, ):
            pass
        
        def canAttackGrouped(self, target, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibilityGrouped, ):
            pass
        
        def canAttackGrouped(self, target, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibilityGrouped, ):
            pass
        
        def canAttackGrouped(self, target, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canAttackGrouped(self, target, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canAttackGrouped(self, target, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canAttackGrouped(self, target, checkCanTargetUnit, ):
            pass
        
        def canAttackGrouped(self, target, checkCanTargetUnit, ):
            pass
        
        def canAttackGrouped(self, target, checkCanTargetUnit, ):
            pass
        
        def canAttackGrouped(self, target, ):
            pass
        
        def canAttackGrouped(self, target, ):
            pass
        
        def canAttackGrouped(self, target, ):
            pass
        
        def canAttackGrouped(self, target, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibilityGrouped, checkCommandibility, ):
            pass
        
        def canAttackGrouped(self, target, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibilityGrouped, checkCommandibility, ):
            pass
        
        def canAttackGrouped(self, target, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibilityGrouped, checkCommandibility, ):
            pass
        
        def canAttackMove(self, ):
            pass
        
        def canAttackMove(self, checkCommandibility, ):
            pass
        
        def canAttackMoveGrouped(self, checkCommandibilityGrouped, ):
            pass
        
        def canAttackMoveGrouped(self, ):
            pass
        
        def canAttackMoveGrouped(self, checkCommandibilityGrouped, checkCommandibility, ):
            pass
        
        def canAttackUnit(self, ):
            pass
        
        def canAttackUnit(self, checkCommandibility, ):
            pass
        
        def canAttackUnit(self, targetUnit, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canAttackUnit(self, targetUnit, checkCanTargetUnit, ):
            pass
        
        def canAttackUnit(self, targetUnit, ):
            pass
        
        def canAttackUnit(self, targetUnit, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canAttackUnitGrouped(self, checkCommandibilityGrouped, ):
            pass
        
        def canAttackUnitGrouped(self, ):
            pass
        
        def canAttackUnitGrouped(self, checkCommandibilityGrouped, checkCommandibility, ):
            pass
        
        def canAttackUnitGrouped(self, targetUnit, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibilityGrouped, ):
            pass
        
        def canAttackUnitGrouped(self, targetUnit, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canAttackUnitGrouped(self, targetUnit, checkCanTargetUnit, ):
            pass
        
        def canAttackUnitGrouped(self, targetUnit, ):
            pass
        
        def canAttackUnitGrouped(self, targetUnit, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibilityGrouped, checkCommandibility, ):
            pass
        
        def canBuild(self, ):
            pass
        
        def canBuild(self, checkCommandibility, ):
            pass
        
        def canBuild(self, uType, checkCanIssueCommandType, ):
            pass
        
        def canBuild(self, uType, ):
            pass
        
        def canBuild(self, uType, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canBuild(self, uType, tilePos, checkTargetUnitType, checkCanIssueCommandType, ):
            pass
        
        def canBuild(self, uType, tilePos, checkTargetUnitType, ):
            pass
        
        def canBuild(self, uType, tilePos, ):
            pass
        
        def canBuild(self, uType, tilePos, checkTargetUnitType, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canBuildAddon(self, ):
            pass
        
        def canBuildAddon(self, checkCommandibility, ):
            pass
        
        def canBuildAddon(self, uType, checkCanIssueCommandType, ):
            pass
        
        def canBuildAddon(self, uType, ):
            pass
        
        def canBuildAddon(self, uType, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canTrain(self, ):
            pass
        
        def canTrain(self, checkCommandibility, ):
            pass
        
        def canTrain(self, uType, checkCanIssueCommandType, ):
            pass
        
        def canTrain(self, uType, ):
            pass
        
        def canTrain(self, uType, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canMorph(self, ):
            pass
        
        def canMorph(self, checkCommandibility, ):
            pass
        
        def canMorph(self, uType, checkCanIssueCommandType, ):
            pass
        
        def canMorph(self, uType, ):
            pass
        
        def canMorph(self, uType, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canResearch(self, ):
            pass
        
        def canResearch(self, checkCommandibility, ):
            pass
        
        def canResearch(self, type, ):
            pass
        
        def canResearch(self, type, checkCanIssueCommandType, ):
            pass
        
        def canUpgrade(self, ):
            pass
        
        def canUpgrade(self, checkCommandibility, ):
            pass
        
        def canUpgrade(self, type, ):
            pass
        
        def canUpgrade(self, type, checkCanIssueCommandType, ):
            pass
        
        def canSetRallyPoint(self, ):
            pass
        
        def canSetRallyPoint(self, checkCommandibility, ):
            pass
        
        def canSetRallyPoint(self, target, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canSetRallyPoint(self, target, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canSetRallyPoint(self, target, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canSetRallyPoint(self, target, checkCanTargetUnit, ):
            pass
        
        def canSetRallyPoint(self, target, checkCanTargetUnit, ):
            pass
        
        def canSetRallyPoint(self, target, checkCanTargetUnit, ):
            pass
        
        def canSetRallyPoint(self, target, ):
            pass
        
        def canSetRallyPoint(self, target, ):
            pass
        
        def canSetRallyPoint(self, target, ):
            pass
        
        def canSetRallyPoint(self, target, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canSetRallyPoint(self, target, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canSetRallyPoint(self, target, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canSetRallyPosition(self, ):
            pass
        
        def canSetRallyPosition(self, checkCommandibility, ):
            pass
        
        def canSetRallyUnit(self, ):
            pass
        
        def canSetRallyUnit(self, checkCommandibility, ):
            pass
        
        def canSetRallyUnit(self, targetUnit, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canSetRallyUnit(self, targetUnit, checkCanTargetUnit, ):
            pass
        
        def canSetRallyUnit(self, targetUnit, ):
            pass
        
        def canSetRallyUnit(self, targetUnit, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canMove(self, ):
            pass
        
        def canMove(self, checkCommandibility, ):
            pass
        
        def canMoveGrouped(self, checkCommandibilityGrouped, ):
            pass
        
        def canMoveGrouped(self, ):
            pass
        
        def canMoveGrouped(self, checkCommandibilityGrouped, checkCommandibility, ):
            pass
        
        def canPatrol(self, ):
            pass
        
        def canPatrol(self, checkCommandibility, ):
            pass
        
        def canPatrolGrouped(self, checkCommandibilityGrouped, ):
            pass
        
        def canPatrolGrouped(self, ):
            pass
        
        def canPatrolGrouped(self, checkCommandibilityGrouped, checkCommandibility, ):
            pass
        
        def canFollow(self, ):
            pass
        
        def canFollow(self, checkCommandibility, ):
            pass
        
        def canFollow(self, targetUnit, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canFollow(self, targetUnit, checkCanTargetUnit, ):
            pass
        
        def canFollow(self, targetUnit, ):
            pass
        
        def canFollow(self, targetUnit, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canGather(self, ):
            pass
        
        def canGather(self, checkCommandibility, ):
            pass
        
        def canGather(self, targetUnit, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canGather(self, targetUnit, checkCanTargetUnit, ):
            pass
        
        def canGather(self, targetUnit, ):
            pass
        
        def canGather(self, targetUnit, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canReturnCargo(self, ):
            pass
        
        def canReturnCargo(self, checkCommandibility, ):
            pass
        
        def canHoldPosition(self, ):
            pass
        
        def canHoldPosition(self, checkCommandibility, ):
            pass
        
        def canStop(self, ):
            pass
        
        def canStop(self, checkCommandibility, ):
            pass
        
        def canRepair(self, ):
            pass
        
        def canRepair(self, checkCommandibility, ):
            pass
        
        def canRepair(self, targetUnit, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canRepair(self, targetUnit, checkCanTargetUnit, ):
            pass
        
        def canRepair(self, targetUnit, ):
            pass
        
        def canRepair(self, targetUnit, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canBurrow(self, ):
            pass
        
        def canBurrow(self, checkCommandibility, ):
            pass
        
        def canUnburrow(self, ):
            pass
        
        def canUnburrow(self, checkCommandibility, ):
            pass
        
        def canCloak(self, ):
            pass
        
        def canCloak(self, checkCommandibility, ):
            pass
        
        def canDecloak(self, ):
            pass
        
        def canDecloak(self, checkCommandibility, ):
            pass
        
        def canSiege(self, ):
            pass
        
        def canSiege(self, checkCommandibility, ):
            pass
        
        def canUnsiege(self, ):
            pass
        
        def canUnsiege(self, checkCommandibility, ):
            pass
        
        def canLift(self, ):
            pass
        
        def canLift(self, checkCommandibility, ):
            pass
        
        def canLand(self, ):
            pass
        
        def canLand(self, checkCommandibility, ):
            pass
        
        def canLand(self, target, checkCanIssueCommandType, ):
            pass
        
        def canLand(self, target, ):
            pass
        
        def canLand(self, target, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canLoad(self, ):
            pass
        
        def canLoad(self, checkCommandibility, ):
            pass
        
        def canLoad(self, targetUnit, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canLoad(self, targetUnit, checkCanTargetUnit, ):
            pass
        
        def canLoad(self, targetUnit, ):
            pass
        
        def canLoad(self, targetUnit, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canUnloadWithOrWithoutTarget(self, ):
            pass
        
        def canUnloadWithOrWithoutTarget(self, checkCommandibility, ):
            pass
        
        def canUnloadAtPosition(self, targDropPos, checkCanIssueCommandType, ):
            pass
        
        def canUnloadAtPosition(self, targDropPos, ):
            pass
        
        def canUnloadAtPosition(self, targDropPos, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canUnload(self, ):
            pass
        
        def canUnload(self, checkCommandibility, ):
            pass
        
        def canUnload(self, targetUnit, checkCanTargetUnit, checkPosition, checkCanIssueCommandType, ):
            pass
        
        def canUnload(self, targetUnit, checkCanTargetUnit, checkPosition, ):
            pass
        
        def canUnload(self, targetUnit, checkCanTargetUnit, ):
            pass
        
        def canUnload(self, targetUnit, ):
            pass
        
        def canUnload(self, targetUnit, checkCanTargetUnit, checkPosition, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canUnloadAll(self, ):
            pass
        
        def canUnloadAll(self, checkCommandibility, ):
            pass
        
        def canUnloadAllPosition(self, ):
            pass
        
        def canUnloadAllPosition(self, checkCommandibility, ):
            pass
        
        def canUnloadAllPosition(self, targDropPos, checkCanIssueCommandType, ):
            pass
        
        def canUnloadAllPosition(self, targDropPos, ):
            pass
        
        def canUnloadAllPosition(self, targDropPos, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canRightClick(self, ):
            pass
        
        def canRightClick(self, checkCommandibility, ):
            pass
        
        def canRightClick(self, target, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canRightClick(self, target, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canRightClick(self, target, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canRightClick(self, target, checkCanTargetUnit, ):
            pass
        
        def canRightClick(self, target, checkCanTargetUnit, ):
            pass
        
        def canRightClick(self, target, checkCanTargetUnit, ):
            pass
        
        def canRightClick(self, target, ):
            pass
        
        def canRightClick(self, target, ):
            pass
        
        def canRightClick(self, target, ):
            pass
        
        def canRightClick(self, target, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canRightClick(self, target, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canRightClick(self, target, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canRightClickGrouped(self, checkCommandibilityGrouped, ):
            pass
        
        def canRightClickGrouped(self, ):
            pass
        
        def canRightClickGrouped(self, checkCommandibilityGrouped, checkCommandibility, ):
            pass
        
        def canRightClickGrouped(self, target, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibilityGrouped, ):
            pass
        
        def canRightClickGrouped(self, target, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibilityGrouped, ):
            pass
        
        def canRightClickGrouped(self, target, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibilityGrouped, ):
            pass
        
        def canRightClickGrouped(self, target, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canRightClickGrouped(self, target, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canRightClickGrouped(self, target, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canRightClickGrouped(self, target, checkCanTargetUnit, ):
            pass
        
        def canRightClickGrouped(self, target, checkCanTargetUnit, ):
            pass
        
        def canRightClickGrouped(self, target, checkCanTargetUnit, ):
            pass
        
        def canRightClickGrouped(self, target, ):
            pass
        
        def canRightClickGrouped(self, target, ):
            pass
        
        def canRightClickGrouped(self, target, ):
            pass
        
        def canRightClickGrouped(self, target, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibilityGrouped, checkCommandibility, ):
            pass
        
        def canRightClickGrouped(self, target, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibilityGrouped, checkCommandibility, ):
            pass
        
        def canRightClickGrouped(self, target, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibilityGrouped, checkCommandibility, ):
            pass
        
        def canRightClickPosition(self, ):
            pass
        
        def canRightClickPosition(self, checkCommandibility, ):
            pass
        
        def canRightClickPositionGrouped(self, checkCommandibilityGrouped, ):
            pass
        
        def canRightClickPositionGrouped(self, ):
            pass
        
        def canRightClickPositionGrouped(self, checkCommandibilityGrouped, checkCommandibility, ):
            pass
        
        def canRightClickUnit(self, ):
            pass
        
        def canRightClickUnit(self, checkCommandibility, ):
            pass
        
        def canRightClickUnit(self, targetUnit, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canRightClickUnit(self, targetUnit, checkCanTargetUnit, ):
            pass
        
        def canRightClickUnit(self, targetUnit, ):
            pass
        
        def canRightClickUnit(self, targetUnit, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canRightClickUnitGrouped(self, checkCommandibilityGrouped, ):
            pass
        
        def canRightClickUnitGrouped(self, ):
            pass
        
        def canRightClickUnitGrouped(self, checkCommandibilityGrouped, checkCommandibility, ):
            pass
        
        def canRightClickUnitGrouped(self, targetUnit, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibilityGrouped, ):
            pass
        
        def canRightClickUnitGrouped(self, targetUnit, checkCanTargetUnit, checkCanIssueCommandType, ):
            pass
        
        def canRightClickUnitGrouped(self, targetUnit, checkCanTargetUnit, ):
            pass
        
        def canRightClickUnitGrouped(self, targetUnit, ):
            pass
        
        def canRightClickUnitGrouped(self, targetUnit, checkCanTargetUnit, checkCanIssueCommandType, checkCommandibilityGrouped, checkCommandibility, ):
            pass
        
        def canHaltConstruction(self, ):
            pass
        
        def canHaltConstruction(self, checkCommandibility, ):
            pass
        
        def canCancelConstruction(self, ):
            pass
        
        def canCancelConstruction(self, checkCommandibility, ):
            pass
        
        def canCancelAddon(self, ):
            pass
        
        def canCancelAddon(self, checkCommandibility, ):
            pass
        
        def canCancelTrain(self, ):
            pass
        
        def canCancelTrain(self, checkCommandibility, ):
            pass
        
        def canCancelTrainSlot(self, ):
            pass
        
        def canCancelTrainSlot(self, checkCommandibility, ):
            pass
        
        def canCancelTrainSlot(self, slot, checkCanIssueCommandType, ):
            pass
        
        def canCancelTrainSlot(self, slot, ):
            pass
        
        def canCancelTrainSlot(self, slot, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canCancelMorph(self, ):
            pass
        
        def canCancelMorph(self, checkCommandibility, ):
            pass
        
        def canCancelResearch(self, ):
            pass
        
        def canCancelResearch(self, checkCommandibility, ):
            pass
        
        def canCancelUpgrade(self, ):
            pass
        
        def canCancelUpgrade(self, checkCommandibility, ):
            pass
        
        def canUseTechWithOrWithoutTarget(self, ):
            pass
        
        def canUseTechWithOrWithoutTarget(self, checkCommandibility, ):
            pass
        
        def canUseTechWithOrWithoutTarget(self, tech, checkCanIssueCommandType, ):
            pass
        
        def canUseTechWithOrWithoutTarget(self, tech, ):
            pass
        
        def canUseTechWithOrWithoutTarget(self, tech, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canUseTech(self, tech, target, checkCanTargetUnit, checkTargetsType, checkCanIssueCommandType, ):
            pass
        
        def canUseTech(self, tech, target, checkCanTargetUnit, checkTargetsType, checkCanIssueCommandType, ):
            pass
        
        def canUseTech(self, tech, target, checkCanTargetUnit, checkTargetsType, checkCanIssueCommandType, ):
            pass
        
        def canUseTech(self, tech, target, checkCanTargetUnit, checkTargetsType, ):
            pass
        
        def canUseTech(self, tech, target, checkCanTargetUnit, checkTargetsType, ):
            pass
        
        def canUseTech(self, tech, target, checkCanTargetUnit, checkTargetsType, ):
            pass
        
        def canUseTech(self, tech, target, checkCanTargetUnit, ):
            pass
        
        def canUseTech(self, tech, target, checkCanTargetUnit, ):
            pass
        
        def canUseTech(self, tech, target, checkCanTargetUnit, ):
            pass
        
        def canUseTech(self, tech, target, ):
            pass
        
        def canUseTech(self, tech, target, ):
            pass
        
        def canUseTech(self, tech, target, ):
            pass
        
        def canUseTech(self, tech, ):
            pass
        
        def canUseTech(self, tech, target, checkCanTargetUnit, checkTargetsType, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canUseTech(self, tech, target, checkCanTargetUnit, checkTargetsType, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canUseTech(self, tech, target, checkCanTargetUnit, checkTargetsType, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canUseTechWithoutTarget(self, tech, checkCanIssueCommandType, ):
            pass
        
        def canUseTechWithoutTarget(self, tech, ):
            pass
        
        def canUseTechWithoutTarget(self, tech, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canUseTechUnit(self, tech, checkCanIssueCommandType, ):
            pass
        
        def canUseTechUnit(self, tech, ):
            pass
        
        def canUseTechUnit(self, tech, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canUseTechUnit(self, tech, targetUnit, checkCanTargetUnit, checkTargetsUnits, checkCanIssueCommandType, ):
            pass
        
        def canUseTechUnit(self, tech, targetUnit, checkCanTargetUnit, checkTargetsUnits, ):
            pass
        
        def canUseTechUnit(self, tech, targetUnit, checkCanTargetUnit, ):
            pass
        
        def canUseTechUnit(self, tech, targetUnit, ):
            pass
        
        def canUseTechUnit(self, tech, targetUnit, checkCanTargetUnit, checkTargetsUnits, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canUseTechPosition(self, tech, checkCanIssueCommandType, ):
            pass
        
        def canUseTechPosition(self, tech, ):
            pass
        
        def canUseTechPosition(self, tech, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canUseTechPosition(self, tech, target, checkTargetsPositions, checkCanIssueCommandType, ):
            pass
        
        def canUseTechPosition(self, tech, target, checkTargetsPositions, ):
            pass
        
        def canUseTechPosition(self, tech, target, ):
            pass
        
        def canUseTechPosition(self, tech, target, checkTargetsPositions, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def canPlaceCOP(self, ):
            pass
        
        def canPlaceCOP(self, checkCommandibility, ):
            pass
        
        def canPlaceCOP(self, target, checkCanIssueCommandType, ):
            pass
        
        def canPlaceCOP(self, target, ):
            pass
        
        def canPlaceCOP(self, target, checkCanIssueCommandType, checkCommandibility, ):
            pass
        
        def equals(self, that, ):
            pass
        
        def hashCode(self, ):
            pass
        
else:
    Unit = Java_Unit
