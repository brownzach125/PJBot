from bwapi import Unitset as Java_Unitset

if False:
    import bwapi_mirror_wrapper.bwapi.Position as Position
    class Unitset(object):

        def __init__(self, field):
            self._field = field

        def __getattribute__(self, attr):
            field_name = object.__getattribute__(self, "_field")
            unit_type = getattr(Java_Unitset, field_name)
            return getattr(unit_type, attr)

        def getPosition(self, ):
            return Position.Position()
        
        def getLoadedUnits(self, ):
            pass
        
        def getInterceptors(self, ):
            pass
        
        def getLarva(self, ):
            pass
        
        def getUnitsInRadius(self, radius, ):
            pass
        
        def issueCommand(self, command, ):
            pass
        
        def attack(self, target, ):
            pass
        
        def attack(self, target, ):
            pass
        
        def attack(self, target, ):
            pass
        
        def attack(self, target, shiftQueueCommand, ):
            pass
        
        def attack(self, target, shiftQueueCommand, ):
            pass
        
        def attack(self, target, shiftQueueCommand, ):
            pass
        
        def build(self, type, ):
            pass
        
        def build(self, type, target, ):
            pass
        
        def buildAddon(self, type, ):
            pass
        
        def train(self, type, ):
            pass
        
        def morph(self, type, ):
            pass
        
        def setRallyPoint(self, target, ):
            pass
        
        def setRallyPoint(self, target, ):
            pass
        
        def setRallyPoint(self, target, ):
            pass
        
        def move(self, target, ):
            pass
        
        def move(self, target, shiftQueueCommand, ):
            pass
        
        def patrol(self, target, ):
            pass
        
        def patrol(self, target, shiftQueueCommand, ):
            pass
        
        def holdPosition(self, ):
            pass
        
        def holdPosition(self, shiftQueueCommand, ):
            pass
        
        def stop(self, ):
            pass
        
        def stop(self, shiftQueueCommand, ):
            pass
        
        def follow(self, target, ):
            pass
        
        def follow(self, target, shiftQueueCommand, ):
            pass
        
        def gather(self, target, ):
            pass
        
        def gather(self, target, shiftQueueCommand, ):
            pass
        
        def returnCargo(self, ):
            pass
        
        def returnCargo(self, shiftQueueCommand, ):
            pass
        
        def repair(self, target, ):
            pass
        
        def repair(self, target, shiftQueueCommand, ):
            pass
        
        def burrow(self, ):
            pass
        
        def unburrow(self, ):
            pass
        
        def cloak(self, ):
            pass
        
        def decloak(self, ):
            pass
        
        def siege(self, ):
            pass
        
        def unsiege(self, ):
            pass
        
        def lift(self, ):
            pass
        
        def load(self, target, ):
            pass
        
        def load(self, target, shiftQueueCommand, ):
            pass
        
        def unloadAll(self, ):
            pass
        
        def unloadAll(self, shiftQueueCommand, ):
            pass
        
        def unloadAll(self, target, ):
            pass
        
        def unloadAll(self, target, shiftQueueCommand, ):
            pass
        
        def rightClick(self, target, ):
            pass
        
        def rightClick(self, target, ):
            pass
        
        def rightClick(self, target, ):
            pass
        
        def rightClick(self, target, shiftQueueCommand, ):
            pass
        
        def rightClick(self, target, shiftQueueCommand, ):
            pass
        
        def rightClick(self, target, shiftQueueCommand, ):
            pass
        
        def haltConstruction(self, ):
            pass
        
        def cancelConstruction(self, ):
            pass
        
        def cancelAddon(self, ):
            pass
        
        def cancelTrain(self, ):
            pass
        
        def cancelTrain(self, slot, ):
            pass
        
        def cancelMorph(self, ):
            pass
        
        def cancelResearch(self, ):
            pass
        
        def cancelUpgrade(self, ):
            pass
        
        def useTech(self, tech, ):
            pass
        
        def useTech(self, tech, target, ):
            pass
        
        def useTech(self, tech, target, ):
            pass
        
        def useTech(self, tech, target, ):
            pass
        
else:
    Unitset = Java_Unitset
