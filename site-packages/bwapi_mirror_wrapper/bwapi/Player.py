from bwapi import Player as Java_Player

if False:
    import bwapi_mirror_wrapper.bwapi.Color as Color
    import bwapi_mirror_wrapper.bwapi.TilePosition as TilePosition
    import bwapi_mirror_wrapper.bwapi.Force as Force
    import bwapi_mirror_wrapper.bwapi.PlayerType as PlayerType
    import bwapi_mirror_wrapper.bwapi.Race as Race
    class Player(object):

        def __init__(self, field):
            self._field = field

        def __getattribute__(self, attr):
            field_name = object.__getattribute__(self, "_field")
            unit_type = getattr(Java_Player, field_name)
            return getattr(unit_type, attr)

        def getID(self, ):
            pass
        
        def getName(self, ):
            pass
        
        def getUnits(self, ):
            pass
        
        def getRace(self, ):
            return Race.Race()
        
        def getType(self, ):
            return PlayerType.PlayerType()
        
        def getForce(self, ):
            return Force.Force()
        
        def isAlly(self, player, ):
            pass
        
        def isEnemy(self, player, ):
            pass
        
        def isNeutral(self, ):
            pass
        
        def getStartLocation(self, ):
            return TilePosition.TilePosition()
        
        def isVictorious(self, ):
            pass
        
        def isDefeated(self, ):
            pass
        
        def leftGame(self, ):
            pass
        
        def minerals(self, ):
            pass
        
        def gas(self, ):
            pass
        
        def gatheredMinerals(self, ):
            pass
        
        def gatheredGas(self, ):
            pass
        
        def repairedMinerals(self, ):
            pass
        
        def repairedGas(self, ):
            pass
        
        def refundedMinerals(self, ):
            pass
        
        def refundedGas(self, ):
            pass
        
        def spentMinerals(self, ):
            pass
        
        def spentGas(self, ):
            pass
        
        def supplyTotal(self, ):
            pass
        
        def supplyTotal(self, race, ):
            pass
        
        def supplyUsed(self, ):
            pass
        
        def supplyUsed(self, race, ):
            pass
        
        def allUnitCount(self, ):
            pass
        
        def allUnitCount(self, unit, ):
            pass
        
        def visibleUnitCount(self, ):
            pass
        
        def visibleUnitCount(self, unit, ):
            pass
        
        def completedUnitCount(self, ):
            pass
        
        def completedUnitCount(self, unit, ):
            pass
        
        def incompleteUnitCount(self, ):
            pass
        
        def incompleteUnitCount(self, unit, ):
            pass
        
        def deadUnitCount(self, ):
            pass
        
        def deadUnitCount(self, unit, ):
            pass
        
        def killedUnitCount(self, ):
            pass
        
        def killedUnitCount(self, unit, ):
            pass
        
        def getUpgradeLevel(self, upgrade, ):
            pass
        
        def hasResearched(self, tech, ):
            pass
        
        def isResearching(self, tech, ):
            pass
        
        def isUpgrading(self, upgrade, ):
            pass
        
        def getColor(self, ):
            return Color.Color()
        
        def getTextColor(self, ):
            pass
        
        def maxEnergy(self, unit, ):
            pass
        
        def topSpeed(self, unit, ):
            pass
        
        def weaponMaxRange(self, weapon, ):
            pass
        
        def sightRange(self, unit, ):
            pass
        
        def weaponDamageCooldown(self, unit, ):
            pass
        
        def armor(self, unit, ):
            pass
        
        def damage(self, wpn, ):
            pass
        
        def getUnitScore(self, ):
            pass
        
        def getKillScore(self, ):
            pass
        
        def getBuildingScore(self, ):
            pass
        
        def getRazingScore(self, ):
            pass
        
        def getCustomScore(self, ):
            pass
        
        def isObserver(self, ):
            pass
        
        def getMaxUpgradeLevel(self, upgrade, ):
            pass
        
        def isResearchAvailable(self, tech, ):
            pass
        
        def isUnitAvailable(self, unit, ):
            pass
        
        def hasUnitTypeRequirement(self, unit, ):
            pass
        
        def hasUnitTypeRequirement(self, unit, amount, ):
            pass
        
        def equals(self, that, ):
            pass
        
        def hashCode(self, ):
            pass
        
else:
    Player = Java_Player
