from bwapi import Game as Java_Game

if False:
    import bwapi_mirror_wrapper.bwapi.TilePosition as TilePosition
    import bwapi_mirror_wrapper.bwapi.Error as Error
    import bwapi_mirror_wrapper.bwapi.Position as Position
    import bwapi_mirror_wrapper.bwapi.GameType as GameType
    import bwapi_mirror_wrapper.bwapi.Region as Region
    import bwapi_mirror_wrapper.bwapi.Unit as Unit
    import bwapi_mirror_wrapper.bwapi.Player as Player
    import bwapi_mirror_wrapper.bwapi.Force as Force
    class Game(object):

        def __init__(self, field):
            self._field = field

        def __getattribute__(self, attr):
            field_name = object.__getattribute__(self, "_field")
            unit_type = getattr(Java_Game, field_name)
            return getattr(unit_type, attr)

        def getForces(self, ):
            pass
        
        def getPlayers(self, ):
            pass
        
        def getAllUnits(self, ):
            pass
        
        def getMinerals(self, ):
            pass
        
        def getGeysers(self, ):
            pass
        
        def getNeutralUnits(self, ):
            pass
        
        def getStaticMinerals(self, ):
            pass
        
        def getStaticGeysers(self, ):
            pass
        
        def getStaticNeutralUnits(self, ):
            pass
        
        def getBullets(self, ):
            pass
        
        def getNukeDots(self, ):
            pass
        
        def getForce(self, forceID, ):
            return Force.Force()
        
        def getPlayer(self, playerID, ):
            return Player.Player()
        
        def getUnit(self, unitID, ):
            return Unit.Unit()
        
        def indexToUnit(self, unitIndex, ):
            return Unit.Unit()
        
        def getRegion(self, regionID, ):
            return Region.Region()
        
        def getGameType(self, ):
            return GameType.GameType()
        
        def getLatency(self, ):
            pass
        
        def getFrameCount(self, ):
            pass
        
        def getReplayFrameCount(self, ):
            pass
        
        def getFPS(self, ):
            pass
        
        def getAverageFPS(self, ):
            pass
        
        def getMousePosition(self, ):
            return Position.Position()
        
        def getMouseState(self, button, ):
            pass
        
        def getKeyState(self, key, ):
            pass
        
        def getScreenPosition(self, ):
            return Position.Position()
        
        def setScreenPosition(self, x, y, ):
            pass
        
        def setScreenPosition(self, p, ):
            pass
        
        def pingMinimap(self, x, y, ):
            pass
        
        def pingMinimap(self, p, ):
            pass
        
        def isFlagEnabled(self, flag, ):
            pass
        
        def enableFlag(self, flag, ):
            pass
        
        def getUnitsOnTile(self, tileX, tileY, ):
            pass
        
        def getUnitsOnTile(self, tile, ):
            pass
        
        def getUnitsInRectangle(self, left, top, right, bottom, ):
            pass
        
        def getUnitsInRectangle(self, topLeft, bottomRight, ):
            pass
        
        def getUnitsInRadius(self, x, y, radius, ):
            pass
        
        def getUnitsInRadius(self, center, radius, ):
            pass
        
        def getLastError(self, ):
            return Error.Error()
        
        def setLastError(self, ):
            pass
        
        def setLastError(self, e, ):
            pass
        
        def mapWidth(self, ):
            pass
        
        def mapHeight(self, ):
            pass
        
        def mapFileName(self, ):
            pass
        
        def mapPathName(self, ):
            pass
        
        def mapName(self, ):
            pass
        
        def mapHash(self, ):
            pass
        
        def isWalkable(self, walkX, walkY, ):
            pass
        
        def isWalkable(self, position, ):
            pass
        
        def getGroundHeight(self, tileX, tileY, ):
            pass
        
        def getGroundHeight(self, position, ):
            pass
        
        def isBuildable(self, tileX, tileY, ):
            pass
        
        def isBuildable(self, tileX, tileY, includeBuildings, ):
            pass
        
        def isBuildable(self, position, ):
            pass
        
        def isBuildable(self, position, includeBuildings, ):
            pass
        
        def isVisible(self, tileX, tileY, ):
            pass
        
        def isVisible(self, position, ):
            pass
        
        def isExplored(self, tileX, tileY, ):
            pass
        
        def isExplored(self, position, ):
            pass
        
        def hasCreep(self, tileX, tileY, ):
            pass
        
        def hasCreep(self, position, ):
            pass
        
        def hasPowerPrecise(self, x, y, ):
            pass
        
        def hasPowerPrecise(self, x, y, unitType, ):
            pass
        
        def hasPowerPrecise(self, position, ):
            pass
        
        def hasPowerPrecise(self, position, unitType, ):
            pass
        
        def hasPower(self, tileX, tileY, ):
            pass
        
        def hasPower(self, tileX, tileY, unitType, ):
            pass
        
        def hasPower(self, position, ):
            pass
        
        def hasPower(self, position, unitType, ):
            pass
        
        def hasPower(self, tileX, tileY, tileWidth, tileHeight, ):
            pass
        
        def hasPower(self, tileX, tileY, tileWidth, tileHeight, unitType, ):
            pass
        
        def hasPower(self, position, tileWidth, tileHeight, ):
            pass
        
        def hasPower(self, position, tileWidth, tileHeight, unitType, ):
            pass
        
        def canBuildHere(self, position, type, builder, ):
            pass
        
        def canBuildHere(self, position, type, ):
            pass
        
        def canBuildHere(self, position, type, builder, checkExplored, ):
            pass
        
        def canMake(self, type, ):
            pass
        
        def canMake(self, type, builder, ):
            pass
        
        def canResearch(self, type, unit, ):
            pass
        
        def canResearch(self, type, ):
            pass
        
        def canResearch(self, type, unit, checkCanIssueCommandType, ):
            pass
        
        def canUpgrade(self, type, unit, ):
            pass
        
        def canUpgrade(self, type, ):
            pass
        
        def canUpgrade(self, type, unit, checkCanIssueCommandType, ):
            pass
        
        def getStartLocations(self, ):
            pass
        
        def printf(self, cstr_format, ):
            pass
        
        def sendText(self, cstr_format, ):
            pass
        
        def sendTextEx(self, toAllies, cstr_format, ):
            pass
        
        def isInGame(self, ):
            pass
        
        def isMultiplayer(self, ):
            pass
        
        def isBattleNet(self, ):
            pass
        
        def isPaused(self, ):
            pass
        
        def isReplay(self, ):
            pass
        
        def pauseGame(self, ):
            pass
        
        def resumeGame(self, ):
            pass
        
        def leaveGame(self, ):
            pass
        
        def restartGame(self, ):
            pass
        
        def setLocalSpeed(self, speed, ):
            pass
        
        def issueCommand(self, units, command, ):
            pass
        
        def getSelectedUnits(self, ):
            pass
        
        def self(self, ):
            return Player.Player()
        
        def enemy(self, ):
            return Player.Player()
        
        def neutral(self, ):
            return Player.Player()
        
        def allies(self, ):
            pass
        
        def enemies(self, ):
            pass
        
        def observers(self, ):
            pass
        
        def setTextSize(self, ):
            pass
        
        def setTextSize(self, size, ):
            pass
        
        def drawText(self, ctype, x, y, cstr_format, ):
            pass
        
        def drawTextMap(self, x, y, cstr_format, ):
            pass
        
        def drawTextMap(self, p, cstr_format, ):
            pass
        
        def drawTextMouse(self, x, y, cstr_format, ):
            pass
        
        def drawTextMouse(self, p, cstr_format, ):
            pass
        
        def drawTextScreen(self, x, y, cstr_format, ):
            pass
        
        def drawTextScreen(self, p, cstr_format, ):
            pass
        
        def drawBox(self, ctype, left, top, right, bottom, color, ):
            pass
        
        def drawBox(self, ctype, left, top, right, bottom, color, isSolid, ):
            pass
        
        def drawBoxMap(self, left, top, right, bottom, color, ):
            pass
        
        def drawBoxMap(self, left, top, right, bottom, color, isSolid, ):
            pass
        
        def drawBoxMap(self, leftTop, rightBottom, color, ):
            pass
        
        def drawBoxMap(self, leftTop, rightBottom, color, isSolid, ):
            pass
        
        def drawBoxMouse(self, left, top, right, bottom, color, ):
            pass
        
        def drawBoxMouse(self, left, top, right, bottom, color, isSolid, ):
            pass
        
        def drawBoxMouse(self, leftTop, rightBottom, color, ):
            pass
        
        def drawBoxMouse(self, leftTop, rightBottom, color, isSolid, ):
            pass
        
        def drawBoxScreen(self, left, top, right, bottom, color, ):
            pass
        
        def drawBoxScreen(self, left, top, right, bottom, color, isSolid, ):
            pass
        
        def drawBoxScreen(self, leftTop, rightBottom, color, ):
            pass
        
        def drawBoxScreen(self, leftTop, rightBottom, color, isSolid, ):
            pass
        
        def drawTriangle(self, ctype, ax, ay, bx, by, cx, cy, color, ):
            pass
        
        def drawTriangle(self, ctype, ax, ay, bx, by, cx, cy, color, isSolid, ):
            pass
        
        def drawTriangleMap(self, ax, ay, bx, by, cx, cy, color, ):
            pass
        
        def drawTriangleMap(self, ax, ay, bx, by, cx, cy, color, isSolid, ):
            pass
        
        def drawTriangleMap(self, a, b, c, color, ):
            pass
        
        def drawTriangleMap(self, a, b, c, color, isSolid, ):
            pass
        
        def drawTriangleMouse(self, ax, ay, bx, by, cx, cy, color, ):
            pass
        
        def drawTriangleMouse(self, ax, ay, bx, by, cx, cy, color, isSolid, ):
            pass
        
        def drawTriangleMouse(self, a, b, c, color, ):
            pass
        
        def drawTriangleMouse(self, a, b, c, color, isSolid, ):
            pass
        
        def drawTriangleScreen(self, ax, ay, bx, by, cx, cy, color, ):
            pass
        
        def drawTriangleScreen(self, ax, ay, bx, by, cx, cy, color, isSolid, ):
            pass
        
        def drawTriangleScreen(self, a, b, c, color, ):
            pass
        
        def drawTriangleScreen(self, a, b, c, color, isSolid, ):
            pass
        
        def drawCircle(self, ctype, x, y, radius, color, ):
            pass
        
        def drawCircle(self, ctype, x, y, radius, color, isSolid, ):
            pass
        
        def drawCircleMap(self, x, y, radius, color, ):
            pass
        
        def drawCircleMap(self, x, y, radius, color, isSolid, ):
            pass
        
        def drawCircleMap(self, p, radius, color, ):
            pass
        
        def drawCircleMap(self, p, radius, color, isSolid, ):
            pass
        
        def drawCircleMouse(self, x, y, radius, color, ):
            pass
        
        def drawCircleMouse(self, x, y, radius, color, isSolid, ):
            pass
        
        def drawCircleMouse(self, p, radius, color, ):
            pass
        
        def drawCircleMouse(self, p, radius, color, isSolid, ):
            pass
        
        def drawCircleScreen(self, x, y, radius, color, ):
            pass
        
        def drawCircleScreen(self, x, y, radius, color, isSolid, ):
            pass
        
        def drawCircleScreen(self, p, radius, color, ):
            pass
        
        def drawCircleScreen(self, p, radius, color, isSolid, ):
            pass
        
        def drawEllipse(self, ctype, x, y, xrad, yrad, color, ):
            pass
        
        def drawEllipse(self, ctype, x, y, xrad, yrad, color, isSolid, ):
            pass
        
        def drawEllipseMap(self, x, y, xrad, yrad, color, ):
            pass
        
        def drawEllipseMap(self, x, y, xrad, yrad, color, isSolid, ):
            pass
        
        def drawEllipseMap(self, p, xrad, yrad, color, ):
            pass
        
        def drawEllipseMap(self, p, xrad, yrad, color, isSolid, ):
            pass
        
        def drawEllipseMouse(self, x, y, xrad, yrad, color, ):
            pass
        
        def drawEllipseMouse(self, x, y, xrad, yrad, color, isSolid, ):
            pass
        
        def drawEllipseMouse(self, p, xrad, yrad, color, ):
            pass
        
        def drawEllipseMouse(self, p, xrad, yrad, color, isSolid, ):
            pass
        
        def drawEllipseScreen(self, x, y, xrad, yrad, color, ):
            pass
        
        def drawEllipseScreen(self, x, y, xrad, yrad, color, isSolid, ):
            pass
        
        def drawEllipseScreen(self, p, xrad, yrad, color, ):
            pass
        
        def drawEllipseScreen(self, p, xrad, yrad, color, isSolid, ):
            pass
        
        def drawDot(self, ctype, x, y, color, ):
            pass
        
        def drawDotMap(self, x, y, color, ):
            pass
        
        def drawDotMap(self, p, color, ):
            pass
        
        def drawDotMouse(self, x, y, color, ):
            pass
        
        def drawDotMouse(self, p, color, ):
            pass
        
        def drawDotScreen(self, x, y, color, ):
            pass
        
        def drawDotScreen(self, p, color, ):
            pass
        
        def drawLine(self, ctype, x1, y1, x2, y2, color, ):
            pass
        
        def drawLineMap(self, x1, y1, x2, y2, color, ):
            pass
        
        def drawLineMap(self, a, b, color, ):
            pass
        
        def drawLineMouse(self, x1, y1, x2, y2, color, ):
            pass
        
        def drawLineMouse(self, a, b, color, ):
            pass
        
        def drawLineScreen(self, x1, y1, x2, y2, color, ):
            pass
        
        def drawLineScreen(self, a, b, color, ):
            pass
        
        def getLatencyFrames(self, ):
            pass
        
        def getLatencyTime(self, ):
            pass
        
        def getRemainingLatencyFrames(self, ):
            pass
        
        def getRemainingLatencyTime(self, ):
            pass
        
        def getRevision(self, ):
            pass
        
        def isDebug(self, ):
            pass
        
        def isLatComEnabled(self, ):
            pass
        
        def setLatCom(self, isEnabled, ):
            pass
        
        def isGUIEnabled(self, ):
            pass
        
        def setGUI(self, enabled, ):
            pass
        
        def getInstanceNumber(self, ):
            pass
        
        def getAPM(self, ):
            pass
        
        def getAPM(self, includeSelects, ):
            pass
        
        def setMap(self, cstr_mapFileName, ):
            pass
        
        def setFrameSkip(self, frameSkip, ):
            pass
        
        def hasPath(self, source, destination, ):
            pass
        
        def setAlliance(self, player, allied, ):
            pass
        
        def setAlliance(self, player, ):
            pass
        
        def setAlliance(self, player, allied, alliedVictory, ):
            pass
        
        def setVision(self, player, ):
            pass
        
        def setVision(self, player, enabled, ):
            pass
        
        def elapsedTime(self, ):
            pass
        
        def setCommandOptimizationLevel(self, level, ):
            pass
        
        def countdownTimer(self, ):
            pass
        
        def getAllRegions(self, ):
            pass
        
        def getRegionAt(self, x, y, ):
            return Region.Region()
        
        def getRegionAt(self, position, ):
            return Region.Region()
        
        def getLastEventTime(self, ):
            pass
        
        def setRevealAll(self, ):
            pass
        
        def setRevealAll(self, reveal, ):
            pass
        
        def getBuildLocation(self, type, desiredPosition, maxRange, ):
            return TilePosition.TilePosition()
        
        def getBuildLocation(self, type, desiredPosition, ):
            return TilePosition.TilePosition()
        
        def getBuildLocation(self, type, desiredPosition, maxRange, creep, ):
            return TilePosition.TilePosition()
        
        def getDamageFrom(self, fromType, toType, fromPlayer, ):
            pass
        
        def getDamageFrom(self, fromType, toType, ):
            pass
        
        def getDamageFrom(self, fromType, toType, fromPlayer, toPlayer, ):
            pass
        
        def getDamageTo(self, toType, fromType, toPlayer, ):
            pass
        
        def getDamageTo(self, toType, fromType, ):
            pass
        
        def getDamageTo(self, toType, fromType, toPlayer, fromPlayer, ):
            pass
        
else:
    Game = Java_Game
