from bwapi import UnitCommand as Java_UnitCommand

if False:
    import bwapi_mirror_wrapper.bwapi.Order as TilePosition
    import bwapi_mirror_wrapper.bwapi.Order as Position
    import bwapi_mirror_wrapper.bwapi.Order as UnitCommandType
    import bwapi_mirror_wrapper.bwapi.Order as Unit
    class UnitCommand(object):

        def __init__(self, field):
            self._field = field

        def __getattribute__(self, attr):
            field_name = object.__getattribute__(self, "_field")
            unit_type = getattr(Java_UnitCommand, field_name)
            return getattr(unit_type, attr)

        def attack(self, unit, target, ):
            return UnitCommand.UnitCommand()
        
        def attack(self, unit, target, shiftQueueCommand, ):
            return UnitCommand.UnitCommand()
        
        def build(self, unit, target, type, ):
            return UnitCommand.UnitCommand()
        
        def buildAddon(self, unit, type, ):
            return UnitCommand.UnitCommand()
        
        def train(self, unit, type, ):
            return UnitCommand.UnitCommand()
        
        def morph(self, unit, type, ):
            return UnitCommand.UnitCommand()
        
        def research(self, unit, tech, ):
            return UnitCommand.UnitCommand()
        
        def upgrade(self, unit, upgrade, ):
            return UnitCommand.UnitCommand()
        
        def setRallyPoint(self, unit, target, ):
            return UnitCommand.UnitCommand()
        
        def move(self, unit, target, ):
            return UnitCommand.UnitCommand()
        
        def move(self, unit, target, shiftQueueCommand, ):
            return UnitCommand.UnitCommand()
        
        def patrol(self, unit, target, ):
            return UnitCommand.UnitCommand()
        
        def patrol(self, unit, target, shiftQueueCommand, ):
            return UnitCommand.UnitCommand()
        
        def holdPosition(self, unit, ):
            return UnitCommand.UnitCommand()
        
        def holdPosition(self, unit, shiftQueueCommand, ):
            return UnitCommand.UnitCommand()
        
        def stop(self, unit, ):
            return UnitCommand.UnitCommand()
        
        def stop(self, unit, shiftQueueCommand, ):
            return UnitCommand.UnitCommand()
        
        def follow(self, unit, target, ):
            return UnitCommand.UnitCommand()
        
        def follow(self, unit, target, shiftQueueCommand, ):
            return UnitCommand.UnitCommand()
        
        def gather(self, unit, target, ):
            return UnitCommand.UnitCommand()
        
        def gather(self, unit, target, shiftQueueCommand, ):
            return UnitCommand.UnitCommand()
        
        def returnCargo(self, unit, ):
            return UnitCommand.UnitCommand()
        
        def returnCargo(self, unit, shiftQueueCommand, ):
            return UnitCommand.UnitCommand()
        
        def repair(self, unit, target, ):
            return UnitCommand.UnitCommand()
        
        def repair(self, unit, target, shiftQueueCommand, ):
            return UnitCommand.UnitCommand()
        
        def burrow(self, unit, ):
            return UnitCommand.UnitCommand()
        
        def unburrow(self, unit, ):
            return UnitCommand.UnitCommand()
        
        def cloak(self, unit, ):
            return UnitCommand.UnitCommand()
        
        def decloak(self, unit, ):
            return UnitCommand.UnitCommand()
        
        def siege(self, unit, ):
            return UnitCommand.UnitCommand()
        
        def unsiege(self, unit, ):
            return UnitCommand.UnitCommand()
        
        def lift(self, unit, ):
            return UnitCommand.UnitCommand()
        
        def land(self, unit, target, ):
            return UnitCommand.UnitCommand()
        
        def load(self, unit, target, ):
            return UnitCommand.UnitCommand()
        
        def load(self, unit, target, shiftQueueCommand, ):
            return UnitCommand.UnitCommand()
        
        def unload(self, unit, target, ):
            return UnitCommand.UnitCommand()
        
        def unloadAll(self, unit, ):
            return UnitCommand.UnitCommand()
        
        def unloadAll(self, unit, shiftQueueCommand, ):
            return UnitCommand.UnitCommand()
        
        def unloadAll(self, unit, target, ):
            return UnitCommand.UnitCommand()
        
        def unloadAll(self, unit, target, shiftQueueCommand, ):
            return UnitCommand.UnitCommand()
        
        def rightClick(self, unit, target, ):
            return UnitCommand.UnitCommand()
        
        def rightClick(self, unit, target, shiftQueueCommand, ):
            return UnitCommand.UnitCommand()
        
        def haltConstruction(self, unit, ):
            return UnitCommand.UnitCommand()
        
        def cancelConstruction(self, unit, ):
            return UnitCommand.UnitCommand()
        
        def cancelAddon(self, unit, ):
            return UnitCommand.UnitCommand()
        
        def cancelTrain(self, unit, ):
            return UnitCommand.UnitCommand()
        
        def cancelTrain(self, unit, slot, ):
            return UnitCommand.UnitCommand()
        
        def cancelMorph(self, unit, ):
            return UnitCommand.UnitCommand()
        
        def cancelResearch(self, unit, ):
            return UnitCommand.UnitCommand()
        
        def cancelUpgrade(self, unit, ):
            return UnitCommand.UnitCommand()
        
        def useTech(self, unit, tech, ):
            return UnitCommand.UnitCommand()
        
        def useTech(self, unit, tech, target, ):
            return UnitCommand.UnitCommand()
        
        def placeCOP(self, unit, target, ):
            return UnitCommand.UnitCommand()
        
        def getUnit(self, ):
            return Unit.Unit()
        
        def getUnitCommandType(self, ):
            return UnitCommandType.UnitCommandType()
        
        def getTarget(self, ):
            return Unit.Unit()
        
        def getSlot(self, ):
            pass
        
        def getTargetPosition(self, ):
            return Position.Position()
        
        def getTargetTilePosition(self, ):
            return TilePosition.TilePosition()
        
        def isQueued(self, ):
            pass
        
        def equals(self, o, ):
            pass
        
        def hashCode(self, ):
            pass
        
else:
    UnitCommand = Java_UnitCommand
