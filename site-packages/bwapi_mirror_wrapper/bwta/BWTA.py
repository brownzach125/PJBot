from bwta import BWTA as Java_BWTA

if False:
    import bwapi_mirror_wrapper.bwapi.Pair as Pair
    import bwapi_mirror_wrapper.bwapi.Position as Position
    import bwapi_mirror_wrapper.bwta.Polygon as Polygon
    import bwapi_mirror_wrapper.bwta.Chokepoint as Chokepoint
    import bwapi_mirror_wrapper.bwta.Region as Region
    import bwapi_mirror_wrapper.bwta.BaseLocation as BaseLocation
    class BWTA(object):

        def __init__(self, *args, **kwargs):
            self._base = Java_BWTA(*args, **kwargs)

        def __getattribute__(self, attr):
            return getattr(object.__getattribute__(self, "_base"), attr)

        def readMap(self, ):
            pass
        
        def analyze(self, ):
            pass
        
        def computeDistanceTransform(self, ):
            pass
        
        def balanceAnalysis(self, ):
            pass
        
        def cleanMemory(self, ):
            pass
        
        def getMaxDistanceTransform(self, ):
            pass
        
        def getRegions(self, ):
            pass
        
        def getChokepoints(self, ):
            pass
        
        def getBaseLocations(self, ):
            pass
        
        def getStartLocations(self, ):
            pass
        
        def getUnwalkablePolygons(self, ):
            pass
        
        def getStartLocation(self, player, ):
            return BaseLocation.BaseLocation()
        
        def getRegion(self, x, y, ):
            return Region.Region()
        
        def getRegion(self, tileposition, ):
            return Region.Region()
        
        def getRegion(self, position, ):
            return Region.Region()
        
        def getNearestChokepoint(self, x, y, ):
            return Chokepoint.Chokepoint()
        
        def getNearestChokepoint(self, tileposition, ):
            return Chokepoint.Chokepoint()
        
        def getNearestChokepoint(self, position, ):
            return Chokepoint.Chokepoint()
        
        def getNearestBaseLocation(self, x, y, ):
            return BaseLocation.BaseLocation()
        
        def getNearestBaseLocation(self, tileposition, ):
            return BaseLocation.BaseLocation()
        
        def getNearestBaseLocation(self, position, ):
            return BaseLocation.BaseLocation()
        
        def getNearestUnwalkablePolygon(self, x, y, ):
            return Polygon.Polygon()
        
        def getNearestUnwalkablePolygon(self, tileposition, ):
            return Polygon.Polygon()
        
        def getNearestUnwalkablePosition(self, position, ):
            return Position.Position()
        
        def isConnected(self, x1, y1, x2, y2, ):
            pass
        
        def isConnected(self, a, b, ):
            pass
        
        def getGroundDistance(self, start, end, ):
            pass
        
        def getNearestTilePosition(self, start, targets, ):
            return Pair.Pair()
        
        def getGroundDistances(self, start, targets, ):
            pass
        
        def getShortestPath(self, start, end, ):
            pass
        
        def getShortestPath(self, start, targets, ):
            pass
        
        def buildChokeNodes(self, ):
            pass
        
        def getGroundDistance2(self, start, end, ):
            pass
        
else:
    BWTA = Java_BWTA
